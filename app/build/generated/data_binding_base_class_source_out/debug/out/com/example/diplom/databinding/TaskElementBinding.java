// Generated by view binder compiler. Do not edit!
package com.example.diplom.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.Space;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.diplom.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TaskElementBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView dataTimeTextView;

  @NonNull
  public final ImageButton deletTrash;

  @NonNull
  public final TextView descriptionTextView;

  @NonNull
  public final View line;

  @NonNull
  public final Space spaceBetweenDataTimeAndParent;

  @NonNull
  public final Space spaceBetweenLineAndDescriptionTextView;

  @NonNull
  public final Space spaceBetweenParentAndTaskList;

  @NonNull
  public final Space spaceBetweenTaskTextViewAndLine;

  @NonNull
  public final TextView taskTextView;

  private TaskElementBinding(@NonNull ConstraintLayout rootView, @NonNull TextView dataTimeTextView,
      @NonNull ImageButton deletTrash, @NonNull TextView descriptionTextView, @NonNull View line,
      @NonNull Space spaceBetweenDataTimeAndParent,
      @NonNull Space spaceBetweenLineAndDescriptionTextView,
      @NonNull Space spaceBetweenParentAndTaskList, @NonNull Space spaceBetweenTaskTextViewAndLine,
      @NonNull TextView taskTextView) {
    this.rootView = rootView;
    this.dataTimeTextView = dataTimeTextView;
    this.deletTrash = deletTrash;
    this.descriptionTextView = descriptionTextView;
    this.line = line;
    this.spaceBetweenDataTimeAndParent = spaceBetweenDataTimeAndParent;
    this.spaceBetweenLineAndDescriptionTextView = spaceBetweenLineAndDescriptionTextView;
    this.spaceBetweenParentAndTaskList = spaceBetweenParentAndTaskList;
    this.spaceBetweenTaskTextViewAndLine = spaceBetweenTaskTextViewAndLine;
    this.taskTextView = taskTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TaskElementBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TaskElementBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.task_element, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TaskElementBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dataTimeTextView;
      TextView dataTimeTextView = ViewBindings.findChildViewById(rootView, id);
      if (dataTimeTextView == null) {
        break missingId;
      }

      id = R.id.deletTrash;
      ImageButton deletTrash = ViewBindings.findChildViewById(rootView, id);
      if (deletTrash == null) {
        break missingId;
      }

      id = R.id.descriptionTextView;
      TextView descriptionTextView = ViewBindings.findChildViewById(rootView, id);
      if (descriptionTextView == null) {
        break missingId;
      }

      id = R.id.line;
      View line = ViewBindings.findChildViewById(rootView, id);
      if (line == null) {
        break missingId;
      }

      id = R.id.space_between_DataTime_and_parent;
      Space spaceBetweenDataTimeAndParent = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetweenDataTimeAndParent == null) {
        break missingId;
      }

      id = R.id.space_between_line_and_descriptionTextView;
      Space spaceBetweenLineAndDescriptionTextView = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetweenLineAndDescriptionTextView == null) {
        break missingId;
      }

      id = R.id.space_between_parent_and_taskList;
      Space spaceBetweenParentAndTaskList = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetweenParentAndTaskList == null) {
        break missingId;
      }

      id = R.id.space_between_taskTextView_and_line;
      Space spaceBetweenTaskTextViewAndLine = ViewBindings.findChildViewById(rootView, id);
      if (spaceBetweenTaskTextViewAndLine == null) {
        break missingId;
      }

      id = R.id.taskTextView;
      TextView taskTextView = ViewBindings.findChildViewById(rootView, id);
      if (taskTextView == null) {
        break missingId;
      }

      return new TaskElementBinding((ConstraintLayout) rootView, dataTimeTextView, deletTrash,
          descriptionTextView, line, spaceBetweenDataTimeAndParent,
          spaceBetweenLineAndDescriptionTextView, spaceBetweenParentAndTaskList,
          spaceBetweenTaskTextViewAndLine, taskTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
